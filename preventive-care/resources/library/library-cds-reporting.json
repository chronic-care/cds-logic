{
  "resourceType": "Library",
  "id": "library-cds-reporting",
  "url": "http://github.com/chronic-care/fhir/Library/library-cds-reporting",
  "version": "1.0.0",
  "name": "CDS_Reporting_FHIRv400",
  "title": "CDS Reporting Utilities",
  "status": "active",
  "experimental": true,
  "type" : {
    "coding" : [
      {
        "system" : "http://terminology.hl7.org/CodeSystem/library-type",
        "code" : "logic-library",
        "display" : "Logic Library"
      }
    ]
  },
  "relatedArtifact" : [
    {
      "type" : "depends-on",
      "resource" : "Library/library-commons"
    }
  ],
  "content": [
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}
