{
  "resourceType": "Library",
  "id": "library-commons",
  "url": "http://github.com/chronic-care/fhir/Library/library-commons",
  "version": "1.0.2",
  "name": "CDS_Connect_Commons_for_FHIRv400",
  "title": "CDS Connect Commons",
  "status": "active",
  "experimental": true,
  "type" : {
    "coding" : [
      {
        "system" : "http://terminology.hl7.org/CodeSystem/library-type",
        "code" : "logic-library",
        "display" : "Logic Library"
      }
    ]
  },
  "relatedArtifact" : [
    {
      "type" : "depends-on",
      "resource" : "Library/library-fhir-helpers"
    }
  ],
  "content": [
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}
