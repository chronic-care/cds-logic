{
  "resourceType": "Library",
  "id": "library-commons",
  "url": "http://github.com/chronic-care/fhir/Library/library-commons",
  "version": "1.0.1",
  "name": "CDS_Connect_Commons_for_FHIRv400",
  "title": "CDS Connect Commons",
  "status": "active",
  "experimental": true,
  "type" : {
    "coding" : [
      {
        "system" : "http://terminology.hl7.org/CodeSystem/library-type",
        "code" : "logic-library",
        "display" : "Logic Library"
      }
    ]
  },
  "relatedArtifact" : [
    {
      "type" : "depends-on",
      "resource" : "Library/library-fhir-helpers"
    }
  ],
  "content": [
    {
      "contentType": "text/cql",
      "data": "// CDS Connect Commons for FHIRv400
// Change log:
// - 1.0.1
//   - Fix logic for ActiveOrRecurring to use equivalence matching (instead of "in"
//     which uses equality matching)
//   - Add back ...ByConcept functions for backwards compatibility w/ libraries that
//     might expect them
//   - Consider effectiveInstant in ObservationLookBack
library CDS_Connect_Commons_for_FHIRv400 version '1.0.1'

using FHIR version '4.0.0'

// Include the FHIRHelpers library for simplifying interacton w/ the FHIR data model
include FHIRHelpers version '4.0.0' called FHIRHelpers

codesystem "AIVERSTATUS": 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification'
codesystem "AICLINSTATUS": 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'
codesystem "CONDVERSTATUS": 'http://terminology.hl7.org/CodeSystem/condition-ver-status'
codesystem "CONDCLINSTATUS": 'http://terminology.hl7.org/CodeSystem/condition-clinical'
code "AllergyIntolerance Confirmed code": 'confirmed' from "AIVERSTATUS" display 'Confirmed'
code "AllergyIntolerance Active code": 'active' from "AICLINSTATUS" display 'Active'
code "Condition Confirmed code": 'confirmed' from "CONDVERSTATUS" display 'Confirmed'
code "Condition Active code": 'active' from "CONDCLINSTATUS" display 'Active'
code "Condition Recurrence code": 'recurrence' from "CONDCLINSTATUS" display 'Recurrence'
code "Condition Relapse code": 'relapse' from "CONDCLINSTATUS" display 'Relapse'
concept "AllergyIntolerance Confirmed": { "AllergyIntolerance Confirmed code" } display 'Confirmed'
concept "AllergyIntolerance Active": { "AllergyIntolerance Active code" } display 'Active'
concept "Condition Confirmed": { "Condition Confirmed code" } display 'Confirmed'
concept "Condition Active": { "Condition Active code" } display 'Active'
concept "Condition Recurrence": { "Condition Recurrence code" } display 'Recurrence'
concept "Condition Relapse": { "Condition Relapse code" } display 'Relapse'

// -------------------------------------------------- GENERAL ---------------------------------------------------------

/**
 * Converts a FHIR Period to a CQL Interval.  FHIRHelpers provides a function for this, but
 * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL
 * Execution Framework apparently does not handle this correctly.  Creating uniquely named
 * functions here ensures safe execution.
 * @param period - a FHIR Period
 * @returns {System.Interval} a CQL Interval or null if null was passed in
 */
define function PeriodToInterval(period FHIR.Period):
  if period is null then
    null
  else
    Interval[period."start".value, period."end".value]

/**
 * Converts a FHIR Range to a CQL Interval.  FHIRHelpers provides a function for this, but
 * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL
 * Execution Framework apparently does not handle this correctly.  Creating uniquely named
 * functions here ensures safe execution.
 * @param range - a FHIR Range
 * @returns {System.Interval} a CQL Interval or null if null was passed in
 */
define function RangeToInterval(range FHIR.Range):
  if range is null then
    null
  else
    Interval[FHIRHelpers.ToQuantity(range.low), FHIRHelpers.ToQuantity(range.high)]

// -------------------------------------------------- OBSERVATIONS -----------------------------------------------------

/**
 * Filters Observations by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List<Observation>} a list of Observations matching the concept, or null if null was passed in
 */
define function ObservationsByConcept(Koncept System.Concept):
  [Observation] O where FHIRHelpers.ToConcept(O.code) ~ Koncept

/**
 * Observations that are complete and verified. In FHIR R4, there are three statuses that indicate this state: 'final',
 * 'corrected', and 'amended'.
 * @see http://hl7.org/fhir/R4/valueset-observation-status.html
 * @param ObsList - a list of Observations
 * @returns {List<Observation>} a list of verified Observations, or null if null was passed in
 */
define function Verified(ObsList List<Observation>):
  ObsList O where O.status.value in {'final', 'corrected', 'amended'}

/**
 * Observations that have quantity values recorded in the requested unit.
 * @param ObsList - a list of Observations
 * @param Unit - the unit to require in the Observations quantity value
 * @returns {List<Observation>} a list of Observations with the required unit, or null if null was passed in
 */
define function WithUnit(ObsList List<Observation>, Unit String):
  ObsList O
    where (O.value as FHIR.Quantity).unit.value = Unit or (O.value as FHIR.Quantity).code.value = Unit

/**
 * Observations with an effective or issued date in the specified "look back" period.  For example, LDL-C Tests in the
 * last 6 years.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param ObsList - a list of Observations
 * @returns {List<Observation>} a list of Observations with effective or issued date specified lookback period, or null
 * if null was passed in
 */
define function ObservationLookBack(ObsList List<Observation>, LookBack System.Quantity):
  ObsList O
    let LookBackInterval: Interval[Now() - LookBack, Now()]
    where (O.effective as FHIR.dateTime).value in LookBackInterval
      or (O.effective as FHIR.instant).value in LookBackInterval
      or PeriodToInterval(O.effective as FHIR.Period) overlaps LookBackInterval
      or O.issued.value in LookBackInterval

/**
 * The most recent observation.  For each Observation, this algorithm will use the Coalesce function, which uses the
 * first non-null date value from these fields: effectiveDateTime, effectiveInstant, effectivePeriod.end,
 * effectivePeriod.start, issued. The found date will be used to compare Observations and determine the most recent
 * one.  NOTE: We can't use FindDate because it appears that the execution engine may have problems sorting by the
 * result of a function.
 * @param ObsList - a list of Observations
 * @returns {Observation} the most recent Observation from the list, or null if null was passed in
 */
define function MostRecent(ObsList List<Observation>):
  Last(ObsList O sort by Coalesce(
    (effective as FHIR.dateTime).value,
    (effective as FHIR.instant).value,
    (effective as FHIR.Period)."end".value,
    (effective as FHIR.Period)."start".value,
    issued.value)
  )

/**
 * Extracts the quantity value from an Observation, returning it as a CQL Quantity
 * @param Obs - an observation
 * @returns {System.Quantity} the Observation's value as a quantity, or null if there is no quantity value
 */
define function QuantityValue(Obs Observation):
  FHIRHelpers.ToQuantity(Obs.value as FHIR.Quantity)

/**
 * Extracts the CodeableConcept value from an Observation, returning it as a CQL Concept
 * @param Obs - an observation
 * @returns {System.Concept} the Observation's value as a concept, or null if there is no CodeabeConcept value
 */
define function ConceptValue(Obs Observation):
  FHIRHelpers.ToConcept(Obs.value as FHIR.CodeableConcept)

/**
 * Finds the first non-null meaningful date that can be associated with this Observation.  This will look through the
 * following fields in the following order: effectiveDateTime, effectiveInstant, effectivePeriod.end,
 * effectivePeriod.start, issued.
 * @param Obs - an Observation
 * @returns {System.DateTime} the first non-null meaningful date, or null if non is found
 */
define function FindDate(Obs Observation):
  Coalesce(
    (Obs.effective as FHIR.dateTime).value,
    (Obs.effective as FHIR.instant).value,
    (Obs.effective as FHIR.Period)."end".value,
    (Obs.effective as FHIR.Period)."start".value,
    Obs.issued.value
  )

/**
 * The highest observation.
 * The value will be used to compare Observations and determine the highest one.
 * @param ObsList - a list of Observations
 * @returns {System.Quantity} the quantity with the highest value from the list, or null if null was passed in
 */
define function HighestObservation(ObsList List<Observation>):
  Max(ObsList O return FHIRHelpers.ToQuantity(O.value as FHIR.Quantity))


// -------------------------------------------------- CONDITIONS -------------------------------------------------------

/**
 * Filters Conditions by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List<Observation>} a list of Conditions matching the concept, or null if null was passed in
 */
define function ConditionsByConcept(Koncept System.Concept):
  [Condition] C where FHIRHelpers.ToConcept(C.code) ~ Koncept

/**
 * Conditions that are confirmed. In FHIR R4, this is reflected by verificationStatus: 'confirmed'.
 * @see http://hl7.org/fhir/R4/valueset-condition-ver-status.html
 * @param CondList - a list of Conditions
 * @returns {List<Condition>} a list of confirmed Conditions, or null if null was passed in
 */
define function Confirmed(CondList List<Condition>):
  CondList C where C.verificationStatus ~ "Condition Confirmed"

/**
 * Conditions that are active. In FHIR R4, this is reflected by clinicalStatus: 'active' and the absence of any
 * abatement information (i.e., if it abated, it is no longer active).
 * TODO: Rename to Active once the execution engine supports overloaded functions.
 * @see http://hl7.org/fhir/R4/valueset-condition-clinical.html
 * @param CondList - a list of Conditions
 * @returns {List<Condition>} a list of active Conditions, or null if null was passed in
 */
define function ActiveCondition(CondList List<Condition>):
  CondList C
    where C.clinicalStatus ~ "Condition Active"
      and C.abatement is null

/**
 * Conditions that are active or recurring. In FHIR R4, this is reflected by clinicalStatus: 'active', 'recurrence', or
 * 'relapse'.  We do not check for null abatement information because it may have dates from when the now recurring
 * condition initially went into remission.
 * @see http://hl7.org/fhir/R4/valueset-condition-clinical.html
 * @param CondList - a list of Conditions
 * @returns {List<Condition>} a list of active or recurring Conditions, or null if null was passed in
 */
define function ActiveOrRecurring(CondList List<Condition>):
  CondList C
    where C.clinicalStatus ~ "Condition Active"
      or C.clinicalStatus ~ "Condition Recurrence"
      or C.clinicalStatus ~ "Condition Relapse"

/**
 * Conditions with an onset or recorded date in the specified "look back" period.  For example, pregnancy in
 * the last 42 weeks.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param CondList - a list of Conditions
 * @returns {List<Condition>} a list of Conditions with onset or recorded date specified lookback period, or null
 * if null was passed in
 */
define function ConditionLookBack(CondList List<Condition>, LookBack System.Quantity):
  CondList C
    let LookBackInterval: Interval[Now() - LookBack, Now()]
    where (C.onset as FHIR.dateTime).value in LookBackInterval
      or PeriodToInterval(C.onset as FHIR.Period) overlaps LookBackInterval
      or C.recordedDate.value in LookBackInterval

/**
 * The most recent condition.  For each Condition, this algorithm will use the Coalesce function, which uses the
 * first non-null result from these fields: onsetDateTime, onsetPeriod.end, onsetPeriod.start, assertedDate.
 * The found date will be used to compare Conditions and determine the most recent one.
 * @param CondList - a list of Conditions
 * @returns {Condition} the most recent Condition from the list, or null if null was passed in
 */
define function MostRecentCondition(CondList List<Condition>):
  Last(CondList C sort by Coalesce(
    (onset as FHIR.dateTime).value,
    (onset as FHIR.Period)."end".value,
    (onset as FHIR.Period)."start".value,
    recordedDate.value)
  )

 // -------------------------------------------------- PROCEDURES ------------------------------------------------------

 /**
  * Filters Procedures by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
  * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
  * @returns {List<Procedure>} a list of Procedures matching the concept, or null if null was passed in
  */
 define function ProceduresByConcept(Koncept System.Concept):
   [Procedure] P where FHIRHelpers.ToConcept(P.code) ~ Koncept

/**
 * Procedures that are completed. In FHIR R4, this is reflected by status: 'completed'.
 * @see http://hl7.org/fhir/R4/valueset-event-status.html
 * @param ProcList - a list of Procedures
 * @returns {List<Procedure>} a list of completed Procedures, or null if null was passed in
 */
define function Completed(ProcList List<Procedure>):
  ProcList P
    where P.status.value = 'completed'

/**
 * Procedures that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.
 * @see http://hl7.org/fhir/R4/valueset-event-status.html
 * @param ProcList - a list of Procedures
 * @returns {List<Procedure>} a list of completed Procedures, or null if null was passed in
 */
define function ProcedureInProgress(ProcList List<Procedure>):
  ProcList P
    where P.status.value = 'in-progress'

/**
 * Procedures that actually happened or are happening. In FHIR R4, there are a few properties that negate the
 * procedure, most notably when status is 'preparation', 'not-done', 'entered-in-error', or 'unknown'.
 * @see http://hl7.org/fhir/R4/valueset-event-status.html
 * @param ProcList - a list of Procedures
 * @returns {List<Procedure>} a list of Procedures that actually happened or are happening, or null if null was passed in
 */
define function ProcedurePerformance(ProcList List<Procedure>):
  ProcList P
    where not (P.status.value in {'preparation', 'not-done', 'entered-in-error', 'unknown'})

/**
 * Procedures performed in the specified "look back" period.  For example, PCIs performed in the
 * past 2 weeks.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param ProcList - a list of Procedures
 * @param LookBack - the lookback period for when the procedure was performed
 * @returns {List<Procedure>} a list of Procedures performed in the look back period, or null if null
 * was passed in
 */
define function ProcedureLookBack(ProcList List<Procedure>, LookBack System.Quantity):
  ProcList P
    let LookBackInterval: Interval[Now() - LookBack, Now()]
    where (P.performed as FHIR.dateTime).value in LookBackInterval
      or PeriodToInterval(P.performed as FHIR.Period) overlaps LookBackInterval

/**
 * The most recent procedure.  For each Procedure, this algorithm will use the Coalesce function, which returns the
 * first non-null result from these fields: performedDateTime, performedPeriod.end, performedPeriod.start.
 * The found date will be used to compare Procedures and determine the most recent one.
 * @param ProcList - a list of Procedures
 * @returns {Procedure} the most recent Procedure from the list, or null if null was passed in
 */
define function MostRecentProcedure(ProcList List<Procedure>):
  Last(ProcList P sort by Coalesce(
    (performed as FHIR.dateTime).value,
    (performed as FHIR.Period)."end".value,
    (performed as FHIR.Period)."start".value)
  )

// ----------------------------------------------- SERVICEREQUESTS -----------------------------------------------------

// NOTE: In FHIR R4, ProcedureRequest and ReferralRequest are replaced by ServiceRequest

/**
 * ServiceRequests that are active or completed. In FHIR R4, this is reflected by the corresponding
 * status values.
 * @see http://hl7.org/fhir/R4/valueset-request-status.html
 * @param ServiceRequestList - a list of ServiceRequests
 * @returns {List<ServiceRequest>} a list of accepted, in-progress, or completed ProcedureRequests,
 * or null if null was passed in
 */
define function ServiceRequestActiveOrCompleted(ServiceRequestList List<ServiceRequest>):
  ServiceRequestList S
    where S.status.value in List{'active', 'completed'}

/**
 * ServiceRequests ordered in the specified "look back" period.  For example, PCIs ordered in the
 * past 2 weeks.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param ServiceRequestList - a list of ServiceRequests
 * @param LookBack - the lookback period for when the service was ordered
 * @returns {List<ServiceRequest>} a list of ServiceRequests ordered in the look back period, or null if null
 * was passed in
 */
define function ServiceRequestLookBack(ServiceRequestList List<ServiceRequest>, LookBack System.Quantity):
  ServiceRequestList S
    where S.authoredOn.value in Interval[Now() - LookBack, Now()]

// -------------------------------------------------- MEDICATIONS ------------------------------------------------------

/**
 * Filters MedicationStatements by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List<MedicationStatement>} a list of MedicationStatement matching the concept, or null if null was passed in
 */
define function MedicationStatementsByConcept(Koncept System.Concept):
  [MedicationStatement] M where FHIRHelpers.ToConcept(M.medication as FHIR.CodeableConcept) ~ Koncept

/**
 * Filters MedicationRequests by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List<MedicationRequest>} a list of MedicationRequests matching the concept, or null if null was passed in
 */
define function MedicationRequestsByConcept(Koncept System.Concept):
  [MedicationRequest] M where FHIRHelpers.ToConcept(M.medication as FHIR.CodeableConcept) ~ Koncept

/**
 * Medications that are active, according to a statement, but not necessarily verified via a prescription.  For example,
 * medications that a patient has self-reported to be taking.  This may, however, also represent medications that are
 * expected to be active after providing a prescription (e.g., clinician-reported). In FHIR R4, this is reflected by
 * MedicationStatement with status 'active' and no end date or an end date in the future.
 * TODO: Rename to Active once the execution engine supports overloaded functions.
 * @see http://hl7.org/fhir/R4/valueset-medication-statement-status.html
 * @param MedList - a list of MedicationStatements
 * @returns {List<MedicationStatement>} a list of active medication statements, or null if null was passed in
 */
define function ActiveMedicationStatement(MedList List<MedicationStatement>):
  MedList M
    let EffectivePeriod: PeriodToInterval(M.effective as FHIR.Period)
    where M.status.value = 'active'
      and (end of EffectivePeriod is null or end of EffectivePeriod after Now())

/**
* Medication requests that are active.  In FHIR R4, this is reflected by MedicationRequest with status 'active'.
* Note that in R4, the MedicationRequest Boundaries and Relationships now says: "When reporting on the usage of
* a medication by a patient, the MedicationStatement resource should be used." It also indicates that:
* "A medication statement is not a part of the prescribe->dispense->administer sequence but is a report that
* such a sequence (or at least a part of it) did take place resulting in a belief that the patient has received
* a particular medication." In this regard, MedicationStatement is more appropriate as an indication of an actually
* active medication, although it's not clear if vendors really will automatically create MedicationStatements in
* these cases or not.  Until we know, MedicationRequest may be the best proxy we have for an active medication.
* TODO: Should the "intent" field be considered (e.g., is it still active if intent is "proposal" or "plan")?
* TODO: Rename to Active once the execution engine supports overloaded functions.
* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html
* @param MedList - a list of MedicationRequests
* @returns {List<MedicationRequest>} a list of active medication requests, or null if null was passed in
*/
define function ActiveMedicationRequest(MedList List<MedicationRequest>):
  MedList M where M.status.value = 'active'

/**
* Medication requests that are active or completed, according to a prescription.  In FHIR R4, this is reflected by MedicationRequest
* with status 'active' or 'completed'.  See the note above (in ActiveMedicationRequest) for more nuance regarding MedicationRequest
* vs. MedicationStatement.
* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html
* @param MedList - a list of MedicationRequests
* @returns {List<MedicationRequest>} a list of active medication requests, or null if null was passed in
*/
define function ActiveOrCompletedMedicationRequest(MedList List<MedicationRequest>):
  MedList M
    where M.status.value = 'active'
      or M.status.value = 'completed'

/**
 * Medications that are active or completed, according to a statement, but not necessarily verified via a prescription.
 * For example, medications that a patient has self-reported to be taking.  This may, however, also represent
 * medications that are expected to be active after providing a prescription (e.g., clinician-reported).  In FHIR R4,
 * this is reflected by MedicationStatement with status 'active' or 'completed'.
 * TODO: Rename to ActiveOrCompleted once the execution engine supports overloaded functions.
 * @see http://hl7.org/fhir/R4/valueset-medication-statement-status.html
 * @param MedList - a list of MedicationStatements
 * @returns {List<MedicationStatement>} a list of active or completed medication statements, or null if null was passed
 *   in
 */
define function ActiveOrCompletedMedicationStatement(MedList List<MedicationStatement>):
  MedList M
    where M.status.value = 'active'
      or M.status.value = 'completed'

/**
* Medication requests that are active, completed, or stopped, according to a prescription.  In FHIR R4, this is
* reflected by MedicationRequest with status 'active', 'completed', or 'stopped'. See the note above
* (in ActiveMedicationRequest) for more nuance regarding MedicationRequest vs. MedicationStatement.
* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html
* @param MedList - a list of MedicationOrders
* @returns {List<MedicationRequestr>} a list of active medication requests, or null if null was passed in
*/
define function ActiveCompletedOrStoppedMedicationRequest(MedList List<MedicationRequest>):
  MedList M
    where M.status.value = 'active'
      or M.status.value = 'completed'
      or M.status.value = 'stopped'

/**
* Medication requests that are issued in the specified "look back" period.
* TODO: Rename to LookBack once the execution engine supports overloaded functions.
* @param MedList - a list of Medications
* @param LookBack - the lookback period for when the medication was prescribed
* @returns {List<MedicationRequest>} a list of Medications prescribed in the look back period, or null if null
* was passed in
*/
define function MedicationRequestLookBack(MedList List<MedicationRequest>, LookBack System.Quantity):
  MedList M
    let LookBackInterval: Interval[Now() - LookBack, Now()]
    where M.authoredOn.value in LookBackInterval
    // DSTU2 also checked the dateEnded property of MedicationOrder, but this doesn't exist for MedicationRequest

/**
* Medication Statements that are issued in the specified "look back" period.
* TODO: Rename to LookBack once the execution engine supports overloaded functions.
* @param MedList - a list of Medications
* @param LookBack - the lookback period for when the medication was prescribed
* @returns {List<MedicationStatement>} a list of Medications prescribed in the look back period, or null if null
* was passed in
*/
define function MedicationStatementLookBack(MedList List<MedicationStatement>, LookBack System.Quantity):
  MedList M
    let LookBackInterval: Interval[Now() - LookBack, Now()]
    where (M.effective as FHIR.dateTime).value in LookBackInterval
      or PeriodToInterval(M.effective as FHIR.Period) overlaps LookBackInterval

// -------------------------------------------------- ENCOUNTERS ------------------------------------------------------

/**
 * Filters Encounters by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List<Encounter>} a list of Encounters matching the concept, or null if null was passed in
 */
define function EncountersByConcept(Koncept System.Concept):
  [Encounter] E where exists( (E.type) ET where FHIRHelpers.ToConcept(ET) ~ Koncept )

/**
 * Encounters that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.
 * @see http://hl7.org/fhir/R4/valueset-encounter-status.html
 * @param EncList - a list of Encounters
 * @returns {List<Encounter>} a list of in progress encounters, or null if null was passed in
 */
define function InProgress(EncList List<Encounter>):
  EncList E
    where E.status.value = 'in-progress'

// -------------------------------------------------- ALLERGY INTOLERANCES ------------------------------------------------------

/**
 * Filters AllergyIntolerances by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List<AllergyIntolerance>} a list of Allergy Intolerances matching the concept, or null if null was passed in
 */
define function AllergyIntolerancesByConcept(Koncept System.Concept):
  [AllergyIntolerance] A where FHIRHelpers.ToConcept(A.code) ~ Koncept

/**
* AllergyIntolerances that are active or confirmed.  In FHIR STU3, this is reflected by AllergyIntolerance
* with clinicalStatus 'active' or verificationStatus 'confirmed'
* @see https://www.hl7.org/fhir/R4/valueset-allergy-clinical-status.html
* @see https://www.hl7.org/fhir/R4/valueset-allergy-verification-status.html
* @param AllergyIntolList - a list of AllergyIntolerances
* @returns {List<AllergyIntolerance>} a list of active or confirmed allergy intolerances, or null if null was passed in
*/
define function ActiveOrConfirmedAllergyIntolerance(AllergyIntolList List<AllergyIntolerance>):
  AllergyIntolList A
    where A.clinicalStatus ~ "AllergyIntolerance Active"
      or A.verificationStatus ~ "AllergyIntolerance Confirmed"

// -------------------------------------------------------- GOALS ------------------------------------------------------

/**
 * Goals with a start, target, or status date in the specified "look back" period.  For example, Pain Management Goals
 * in the last 2 years.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param GoalList - a list of Goals
 * @returns {List<Goal>} a list of Goals with a start, target, or status date in the specified lookback period, or null
 * if null was passed in
 */
define function GoalLookBack(GoalList List<Goal>, LookBack System.Quantity):
  GoalList G
    let LookBackInterval: Interval[Now() - LookBack, Now()],
    StartDate: (G.start as FHIR.date).value,
    StatusDate: G.statusDate.value,
    TargetDates: (G.target) T return (T.due as FHIR.date).value
//    TargetQuantities: (G.target) T return FHIRHelpers.ToQuantity(T.due as FHIR.Duration)
    where StartDate in LookBackInterval
      or StatusDate in LookBackInterval
      or exists(TargetDates TD where TD in LookBackInterval)
//      or exists(TargetQuantities TQ where (StartDate + TQ) in LookBackInterval)"
    },
    {
      "contentType": "application/elm+json",
      "data": "{
   "library" : {
      "annotation" : [ {
         "translatorOptions" : "",
         "type" : "CqlToElmInfo"
      } ],
      "identifier" : {
         "id" : "CDS_Connect_Commons_for_FHIRv400",
         "version" : "1.0.1"
      },
      "schemaIdentifier" : {
         "id" : "urn:hl7-org:elm",
         "version" : "r1"
      },
      "usings" : {
         "def" : [ {
            "localIdentifier" : "System",
            "uri" : "urn:hl7-org:elm-types:r1"
         }, {
            "localIdentifier" : "FHIR",
            "uri" : "http://hl7.org/fhir",
            "version" : "4.0.0"
         } ]
      },
      "includes" : {
         "def" : [ {
            "localIdentifier" : "FHIRHelpers",
            "path" : "FHIRHelpers",
            "version" : "4.0.0"
         } ]
      },
      "codeSystems" : {
         "def" : [ {
            "name" : "AIVERSTATUS",
            "id" : "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification",
            "accessLevel" : "Public"
         }, {
            "name" : "AICLINSTATUS",
            "id" : "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
            "accessLevel" : "Public"
         }, {
            "name" : "CONDVERSTATUS",
            "id" : "http://terminology.hl7.org/CodeSystem/condition-ver-status",
            "accessLevel" : "Public"
         }, {
            "name" : "CONDCLINSTATUS",
            "id" : "http://terminology.hl7.org/CodeSystem/condition-clinical",
            "accessLevel" : "Public"
         } ]
      },
      "codes" : {
         "def" : [ {
            "name" : "AllergyIntolerance Confirmed code",
            "id" : "confirmed",
            "display" : "Confirmed",
            "accessLevel" : "Public",
            "codeSystem" : {
               "name" : "AIVERSTATUS"
            }
         }, {
            "name" : "AllergyIntolerance Active code",
            "id" : "active",
            "display" : "Active",
            "accessLevel" : "Public",
            "codeSystem" : {
               "name" : "AICLINSTATUS"
            }
         }, {
            "name" : "Condition Confirmed code",
            "id" : "confirmed",
            "display" : "Confirmed",
            "accessLevel" : "Public",
            "codeSystem" : {
               "name" : "CONDVERSTATUS"
            }
         }, {
            "name" : "Condition Active code",
            "id" : "active",
            "display" : "Active",
            "accessLevel" : "Public",
            "codeSystem" : {
               "name" : "CONDCLINSTATUS"
            }
         }, {
            "name" : "Condition Recurrence code",
            "id" : "recurrence",
            "display" : "Recurrence",
            "accessLevel" : "Public",
            "codeSystem" : {
               "name" : "CONDCLINSTATUS"
            }
         }, {
            "name" : "Condition Relapse code",
            "id" : "relapse",
            "display" : "Relapse",
            "accessLevel" : "Public",
            "codeSystem" : {
               "name" : "CONDCLINSTATUS"
            }
         } ]
      },
      "concepts" : {
         "def" : [ {
            "name" : "AllergyIntolerance Confirmed",
            "display" : "Confirmed",
            "accessLevel" : "Public",
            "code" : [ {
               "name" : "AllergyIntolerance Confirmed code"
            } ]
         }, {
            "name" : "AllergyIntolerance Active",
            "display" : "Active",
            "accessLevel" : "Public",
            "code" : [ {
               "name" : "AllergyIntolerance Active code"
            } ]
         }, {
            "name" : "Condition Confirmed",
            "display" : "Confirmed",
            "accessLevel" : "Public",
            "code" : [ {
               "name" : "Condition Confirmed code"
            } ]
         }, {
            "name" : "Condition Active",
            "display" : "Active",
            "accessLevel" : "Public",
            "code" : [ {
               "name" : "Condition Active code"
            } ]
         }, {
            "name" : "Condition Recurrence",
            "display" : "Recurrence",
            "accessLevel" : "Public",
            "code" : [ {
               "name" : "Condition Recurrence code"
            } ]
         }, {
            "name" : "Condition Relapse",
            "display" : "Relapse",
            "accessLevel" : "Public",
            "code" : [ {
               "name" : "Condition Relapse code"
            } ]
         } ]
      },
      "statements" : {
         "def" : [ {
            "name" : "PeriodToInterval",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "If",
               "condition" : {
                  "asType" : "{urn:hl7-org:elm-types:r1}Boolean",
                  "type" : "As",
                  "operand" : {
                     "type" : "IsNull",
                     "operand" : {
                        "name" : "period",
                        "type" : "OperandRef"
                     }
                  }
               },
               "then" : {
                  "type" : "As",
                  "operand" : {
                     "type" : "Null"
                  },
                  "asTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  }
               },
               "else" : {
                  "lowClosed" : true,
                  "highClosed" : true,
                  "type" : "Interval",
                  "low" : {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "start",
                        "type" : "Property",
                        "source" : {
                           "name" : "period",
                           "type" : "OperandRef"
                        }
                     }
                  },
                  "high" : {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "end",
                        "type" : "Property",
                        "source" : {
                           "name" : "period",
                           "type" : "OperandRef"
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "period",
               "operandTypeSpecifier" : {
                  "name" : "{http://hl7.org/fhir}Period",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "RangeToInterval",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "If",
               "condition" : {
                  "asType" : "{urn:hl7-org:elm-types:r1}Boolean",
                  "type" : "As",
                  "operand" : {
                     "type" : "IsNull",
                     "operand" : {
                        "name" : "range",
                        "type" : "OperandRef"
                     }
                  }
               },
               "then" : {
                  "type" : "As",
                  "operand" : {
                     "type" : "Null"
                  },
                  "asTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                        "type" : "NamedTypeSpecifier"
                     }
                  }
               },
               "else" : {
                  "lowClosed" : true,
                  "highClosed" : true,
                  "type" : "Interval",
                  "low" : {
                     "name" : "ToQuantity",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "path" : "low",
                        "type" : "Property",
                        "source" : {
                           "name" : "range",
                           "type" : "OperandRef"
                        }
                     } ]
                  },
                  "high" : {
                     "name" : "ToQuantity",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "path" : "high",
                        "type" : "Property",
                        "source" : {
                           "name" : "range",
                           "type" : "OperandRef"
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "range",
               "operandTypeSpecifier" : {
                  "name" : "{http://hl7.org/fhir}Range",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "ObservationsByConcept",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "O",
                  "expression" : {
                     "dataType" : "{http://hl7.org/fhir}Observation",
                     "type" : "Retrieve"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equivalent",
                  "operand" : [ {
                     "name" : "ToConcept",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "path" : "code",
                        "scope" : "O",
                        "type" : "Property"
                     } ]
                  }, {
                     "name" : "Koncept",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "Koncept",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Concept",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "Verified",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "O",
                  "expression" : {
                     "name" : "ObsList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "In",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "status",
                        "scope" : "O",
                        "type" : "Property"
                     }
                  }, {
                     "type" : "List",
                     "element" : [ {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "final",
                        "type" : "Literal"
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "corrected",
                        "type" : "Literal"
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "amended",
                        "type" : "Literal"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ObsList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Observation",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "WithUnit",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "O",
                  "expression" : {
                     "name" : "ObsList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "unit",
                           "type" : "Property",
                           "source" : {
                              "strict" : false,
                              "type" : "As",
                              "operand" : {
                                 "path" : "value",
                                 "scope" : "O",
                                 "type" : "Property"
                              },
                              "asTypeSpecifier" : {
                                 "name" : "{http://hl7.org/fhir}Quantity",
                                 "type" : "NamedTypeSpecifier"
                              }
                           }
                        }
                     }, {
                        "name" : "Unit",
                        "type" : "OperandRef"
                     } ]
                  }, {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "code",
                           "type" : "Property",
                           "source" : {
                              "strict" : false,
                              "type" : "As",
                              "operand" : {
                                 "path" : "value",
                                 "scope" : "O",
                                 "type" : "Property"
                              },
                              "asTypeSpecifier" : {
                                 "name" : "{http://hl7.org/fhir}Quantity",
                                 "type" : "NamedTypeSpecifier"
                              }
                           }
                        }
                     }, {
                        "name" : "Unit",
                        "type" : "OperandRef"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ObsList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Observation",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "Unit",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}String",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "ObservationLookBack",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "O",
                  "expression" : {
                     "name" : "ObsList",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "identifier" : "LookBackInterval",
                  "expression" : {
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "low" : {
                        "type" : "Subtract",
                        "operand" : [ {
                           "type" : "Now"
                        }, {
                           "name" : "LookBack",
                           "type" : "OperandRef"
                        } ]
                     },
                     "high" : {
                        "type" : "Now"
                     }
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Or",
                     "operand" : [ {
                        "type" : "Or",
                        "operand" : [ {
                           "type" : "In",
                           "operand" : [ {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "strict" : false,
                                 "type" : "As",
                                 "operand" : {
                                    "path" : "effective",
                                    "scope" : "O",
                                    "type" : "Property"
                                 },
                                 "asTypeSpecifier" : {
                                    "name" : "{http://hl7.org/fhir}dateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "name" : "LookBackInterval",
                              "type" : "QueryLetRef"
                           } ]
                        }, {
                           "type" : "In",
                           "operand" : [ {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "strict" : false,
                                 "type" : "As",
                                 "operand" : {
                                    "path" : "effective",
                                    "scope" : "O",
                                    "type" : "Property"
                                 },
                                 "asTypeSpecifier" : {
                                    "name" : "{http://hl7.org/fhir}instant",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "name" : "LookBackInterval",
                              "type" : "QueryLetRef"
                           } ]
                        } ]
                     }, {
                        "type" : "Overlaps",
                        "operand" : [ {
                           "name" : "PeriodToInterval",
                           "type" : "FunctionRef",
                           "operand" : [ {
                              "strict" : false,
                              "type" : "As",
                              "operand" : {
                                 "path" : "effective",
                                 "scope" : "O",
                                 "type" : "Property"
                              },
                              "asTypeSpecifier" : {
                                 "name" : "{http://hl7.org/fhir}Period",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ]
                        }, {
                           "name" : "LookBackInterval",
                           "type" : "QueryLetRef"
                        } ]
                     } ]
                  }, {
                     "type" : "In",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "issued",
                           "scope" : "O",
                           "type" : "Property"
                        }
                     }, {
                        "name" : "LookBackInterval",
                        "type" : "QueryLetRef"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ObsList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Observation",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "LookBack",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "MostRecent",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Last",
               "source" : {
                  "type" : "Query",
                  "source" : [ {
                     "alias" : "O",
                     "expression" : {
                        "name" : "ObsList",
                        "type" : "OperandRef"
                     }
                  } ],
                  "relationship" : [ ],
                  "sort" : {
                     "by" : [ {
                        "direction" : "asc",
                        "type" : "ByExpression",
                        "expression" : {
                           "type" : "Coalesce",
                           "operand" : [ {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "strict" : false,
                                 "type" : "As",
                                 "operand" : {
                                    "name" : "effective",
                                    "type" : "IdentifierRef"
                                 },
                                 "asTypeSpecifier" : {
                                    "name" : "{http://hl7.org/fhir}dateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "strict" : false,
                                 "type" : "As",
                                 "operand" : {
                                    "name" : "effective",
                                    "type" : "IdentifierRef"
                                 },
                                 "asTypeSpecifier" : {
                                    "name" : "{http://hl7.org/fhir}instant",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "end",
                                 "type" : "Property",
                                 "source" : {
                                    "strict" : false,
                                    "type" : "As",
                                    "operand" : {
                                       "name" : "effective",
                                       "type" : "IdentifierRef"
                                    },
                                    "asTypeSpecifier" : {
                                       "name" : "{http://hl7.org/fhir}Period",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "start",
                                 "type" : "Property",
                                 "source" : {
                                    "strict" : false,
                                    "type" : "As",
                                    "operand" : {
                                       "name" : "effective",
                                       "type" : "IdentifierRef"
                                    },
                                    "asTypeSpecifier" : {
                                       "name" : "{http://hl7.org/fhir}Period",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "name" : "issued",
                                 "type" : "IdentifierRef"
                              }
                           } ]
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "ObsList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Observation",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "QuantityValue",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "name" : "ToQuantity",
               "libraryName" : "FHIRHelpers",
               "type" : "FunctionRef",
               "operand" : [ {
                  "strict" : false,
                  "type" : "As",
                  "operand" : {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "name" : "Obs",
                        "type" : "OperandRef"
                     }
                  },
                  "asTypeSpecifier" : {
                     "name" : "{http://hl7.org/fhir}Quantity",
                     "type" : "NamedTypeSpecifier"
                  }
               } ]
            },
            "operand" : [ {
               "name" : "Obs",
               "operandTypeSpecifier" : {
                  "name" : "{http://hl7.org/fhir}Observation",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "ConceptValue",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "name" : "ToConcept",
               "libraryName" : "FHIRHelpers",
               "type" : "FunctionRef",
               "operand" : [ {
                  "strict" : false,
                  "type" : "As",
                  "operand" : {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "name" : "Obs",
                        "type" : "OperandRef"
                     }
                  },
                  "asTypeSpecifier" : {
                     "name" : "{http://hl7.org/fhir}CodeableConcept",
                     "type" : "NamedTypeSpecifier"
                  }
               } ]
            },
            "operand" : [ {
               "name" : "Obs",
               "operandTypeSpecifier" : {
                  "name" : "{http://hl7.org/fhir}Observation",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "FindDate",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Coalesce",
               "operand" : [ {
                  "path" : "value",
                  "type" : "Property",
                  "source" : {
                     "strict" : false,
                     "type" : "As",
                     "operand" : {
                        "path" : "effective",
                        "type" : "Property",
                        "source" : {
                           "name" : "Obs",
                           "type" : "OperandRef"
                        }
                     },
                     "asTypeSpecifier" : {
                        "name" : "{http://hl7.org/fhir}dateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  }
               }, {
                  "path" : "value",
                  "type" : "Property",
                  "source" : {
                     "strict" : false,
                     "type" : "As",
                     "operand" : {
                        "path" : "effective",
                        "type" : "Property",
                        "source" : {
                           "name" : "Obs",
                           "type" : "OperandRef"
                        }
                     },
                     "asTypeSpecifier" : {
                        "name" : "{http://hl7.org/fhir}instant",
                        "type" : "NamedTypeSpecifier"
                     }
                  }
               }, {
                  "path" : "value",
                  "type" : "Property",
                  "source" : {
                     "path" : "end",
                     "type" : "Property",
                     "source" : {
                        "strict" : false,
                        "type" : "As",
                        "operand" : {
                           "path" : "effective",
                           "type" : "Property",
                           "source" : {
                              "name" : "Obs",
                              "type" : "OperandRef"
                           }
                        },
                        "asTypeSpecifier" : {
                           "name" : "{http://hl7.org/fhir}Period",
                           "type" : "NamedTypeSpecifier"
                        }
                     }
                  }
               }, {
                  "path" : "value",
                  "type" : "Property",
                  "source" : {
                     "path" : "start",
                     "type" : "Property",
                     "source" : {
                        "strict" : false,
                        "type" : "As",
                        "operand" : {
                           "path" : "effective",
                           "type" : "Property",
                           "source" : {
                              "name" : "Obs",
                              "type" : "OperandRef"
                           }
                        },
                        "asTypeSpecifier" : {
                           "name" : "{http://hl7.org/fhir}Period",
                           "type" : "NamedTypeSpecifier"
                        }
                     }
                  }
               }, {
                  "path" : "value",
                  "type" : "Property",
                  "source" : {
                     "path" : "issued",
                     "type" : "Property",
                     "source" : {
                        "name" : "Obs",
                        "type" : "OperandRef"
                     }
                  }
               } ]
            },
            "operand" : [ {
               "name" : "Obs",
               "operandTypeSpecifier" : {
                  "name" : "{http://hl7.org/fhir}Observation",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "HighestObservation",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Max",
               "source" : {
                  "type" : "Query",
                  "source" : [ {
                     "alias" : "O",
                     "expression" : {
                        "name" : "ObsList",
                        "type" : "OperandRef"
                     }
                  } ],
                  "relationship" : [ ],
                  "return" : {
                     "expression" : {
                        "name" : "ToQuantity",
                        "libraryName" : "FHIRHelpers",
                        "type" : "FunctionRef",
                        "operand" : [ {
                           "strict" : false,
                           "type" : "As",
                           "operand" : {
                              "path" : "value",
                              "scope" : "O",
                              "type" : "Property"
                           },
                           "asTypeSpecifier" : {
                              "name" : "{http://hl7.org/fhir}Quantity",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ]
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "ObsList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Observation",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ConditionsByConcept",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "C",
                  "expression" : {
                     "dataType" : "{http://hl7.org/fhir}Condition",
                     "type" : "Retrieve"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equivalent",
                  "operand" : [ {
                     "name" : "ToConcept",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "path" : "code",
                        "scope" : "C",
                        "type" : "Property"
                     } ]
                  }, {
                     "name" : "Koncept",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "Koncept",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Concept",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "Confirmed",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "C",
                  "expression" : {
                     "name" : "CondList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equivalent",
                  "operand" : [ {
                     "name" : "ToConcept",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "path" : "verificationStatus",
                        "scope" : "C",
                        "type" : "Property"
                     } ]
                  }, {
                     "name" : "Condition Confirmed",
                     "type" : "ConceptRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "CondList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ActiveCondition",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "C",
                  "expression" : {
                     "name" : "CondList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "And",
                  "operand" : [ {
                     "type" : "Equivalent",
                     "operand" : [ {
                        "name" : "ToConcept",
                        "libraryName" : "FHIRHelpers",
                        "type" : "FunctionRef",
                        "operand" : [ {
                           "path" : "clinicalStatus",
                           "scope" : "C",
                           "type" : "Property"
                        } ]
                     }, {
                        "name" : "Condition Active",
                        "type" : "ConceptRef"
                     } ]
                  }, {
                     "type" : "IsNull",
                     "operand" : {
                        "path" : "abatement",
                        "scope" : "C",
                        "type" : "Property"
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "CondList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ActiveOrRecurring",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "C",
                  "expression" : {
                     "name" : "CondList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Or",
                     "operand" : [ {
                        "type" : "Equivalent",
                        "operand" : [ {
                           "name" : "ToConcept",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "operand" : [ {
                              "path" : "clinicalStatus",
                              "scope" : "C",
                              "type" : "Property"
                           } ]
                        }, {
                           "name" : "Condition Active",
                           "type" : "ConceptRef"
                        } ]
                     }, {
                        "type" : "Equivalent",
                        "operand" : [ {
                           "name" : "ToConcept",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "operand" : [ {
                              "path" : "clinicalStatus",
                              "scope" : "C",
                              "type" : "Property"
                           } ]
                        }, {
                           "name" : "Condition Recurrence",
                           "type" : "ConceptRef"
                        } ]
                     } ]
                  }, {
                     "type" : "Equivalent",
                     "operand" : [ {
                        "name" : "ToConcept",
                        "libraryName" : "FHIRHelpers",
                        "type" : "FunctionRef",
                        "operand" : [ {
                           "path" : "clinicalStatus",
                           "scope" : "C",
                           "type" : "Property"
                        } ]
                     }, {
                        "name" : "Condition Relapse",
                        "type" : "ConceptRef"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "CondList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ConditionLookBack",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "C",
                  "expression" : {
                     "name" : "CondList",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "identifier" : "LookBackInterval",
                  "expression" : {
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "low" : {
                        "type" : "Subtract",
                        "operand" : [ {
                           "type" : "Now"
                        }, {
                           "name" : "LookBack",
                           "type" : "OperandRef"
                        } ]
                     },
                     "high" : {
                        "type" : "Now"
                     }
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Or",
                     "operand" : [ {
                        "type" : "In",
                        "operand" : [ {
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "strict" : false,
                              "type" : "As",
                              "operand" : {
                                 "path" : "onset",
                                 "scope" : "C",
                                 "type" : "Property"
                              },
                              "asTypeSpecifier" : {
                                 "name" : "{http://hl7.org/fhir}dateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           }
                        }, {
                           "name" : "LookBackInterval",
                           "type" : "QueryLetRef"
                        } ]
                     }, {
                        "type" : "Overlaps",
                        "operand" : [ {
                           "name" : "PeriodToInterval",
                           "type" : "FunctionRef",
                           "operand" : [ {
                              "strict" : false,
                              "type" : "As",
                              "operand" : {
                                 "path" : "onset",
                                 "scope" : "C",
                                 "type" : "Property"
                              },
                              "asTypeSpecifier" : {
                                 "name" : "{http://hl7.org/fhir}Period",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ]
                        }, {
                           "name" : "LookBackInterval",
                           "type" : "QueryLetRef"
                        } ]
                     } ]
                  }, {
                     "type" : "In",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "recordedDate",
                           "scope" : "C",
                           "type" : "Property"
                        }
                     }, {
                        "name" : "LookBackInterval",
                        "type" : "QueryLetRef"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "CondList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "LookBack",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "MostRecentCondition",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Last",
               "source" : {
                  "type" : "Query",
                  "source" : [ {
                     "alias" : "C",
                     "expression" : {
                        "name" : "CondList",
                        "type" : "OperandRef"
                     }
                  } ],
                  "relationship" : [ ],
                  "sort" : {
                     "by" : [ {
                        "direction" : "asc",
                        "type" : "ByExpression",
                        "expression" : {
                           "type" : "Coalesce",
                           "operand" : [ {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "strict" : false,
                                 "type" : "As",
                                 "operand" : {
                                    "name" : "onset",
                                    "type" : "IdentifierRef"
                                 },
                                 "asTypeSpecifier" : {
                                    "name" : "{http://hl7.org/fhir}dateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "end",
                                 "type" : "Property",
                                 "source" : {
                                    "strict" : false,
                                    "type" : "As",
                                    "operand" : {
                                       "name" : "onset",
                                       "type" : "IdentifierRef"
                                    },
                                    "asTypeSpecifier" : {
                                       "name" : "{http://hl7.org/fhir}Period",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "start",
                                 "type" : "Property",
                                 "source" : {
                                    "strict" : false,
                                    "type" : "As",
                                    "operand" : {
                                       "name" : "onset",
                                       "type" : "IdentifierRef"
                                    },
                                    "asTypeSpecifier" : {
                                       "name" : "{http://hl7.org/fhir}Period",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "name" : "recordedDate",
                                 "type" : "IdentifierRef"
                              }
                           } ]
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "CondList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ProceduresByConcept",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "P",
                  "expression" : {
                     "dataType" : "{http://hl7.org/fhir}Procedure",
                     "type" : "Retrieve"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equivalent",
                  "operand" : [ {
                     "name" : "ToConcept",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "path" : "code",
                        "scope" : "P",
                        "type" : "Property"
                     } ]
                  }, {
                     "name" : "Koncept",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "Koncept",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Concept",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "Completed",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "P",
                  "expression" : {
                     "name" : "ProcList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equal",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "status",
                        "scope" : "P",
                        "type" : "Property"
                     }
                  }, {
                     "valueType" : "{urn:hl7-org:elm-types:r1}String",
                     "value" : "completed",
                     "type" : "Literal"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ProcList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Procedure",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ProcedureInProgress",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "P",
                  "expression" : {
                     "name" : "ProcList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equal",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "status",
                        "scope" : "P",
                        "type" : "Property"
                     }
                  }, {
                     "valueType" : "{urn:hl7-org:elm-types:r1}String",
                     "value" : "in-progress",
                     "type" : "Literal"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ProcList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Procedure",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ProcedurePerformance",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "P",
                  "expression" : {
                     "name" : "ProcList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Not",
                  "operand" : {
                     "type" : "In",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "P",
                           "type" : "Property"
                        }
                     }, {
                        "type" : "List",
                        "element" : [ {
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "preparation",
                           "type" : "Literal"
                        }, {
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "not-done",
                           "type" : "Literal"
                        }, {
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "entered-in-error",
                           "type" : "Literal"
                        }, {
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "unknown",
                           "type" : "Literal"
                        } ]
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "ProcList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Procedure",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ProcedureLookBack",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "P",
                  "expression" : {
                     "name" : "ProcList",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "identifier" : "LookBackInterval",
                  "expression" : {
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "low" : {
                        "type" : "Subtract",
                        "operand" : [ {
                           "type" : "Now"
                        }, {
                           "name" : "LookBack",
                           "type" : "OperandRef"
                        } ]
                     },
                     "high" : {
                        "type" : "Now"
                     }
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "In",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "strict" : false,
                           "type" : "As",
                           "operand" : {
                              "path" : "performed",
                              "scope" : "P",
                              "type" : "Property"
                           },
                           "asTypeSpecifier" : {
                              "name" : "{http://hl7.org/fhir}dateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }, {
                        "name" : "LookBackInterval",
                        "type" : "QueryLetRef"
                     } ]
                  }, {
                     "type" : "Overlaps",
                     "operand" : [ {
                        "name" : "PeriodToInterval",
                        "type" : "FunctionRef",
                        "operand" : [ {
                           "strict" : false,
                           "type" : "As",
                           "operand" : {
                              "path" : "performed",
                              "scope" : "P",
                              "type" : "Property"
                           },
                           "asTypeSpecifier" : {
                              "name" : "{http://hl7.org/fhir}Period",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ]
                     }, {
                        "name" : "LookBackInterval",
                        "type" : "QueryLetRef"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ProcList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Procedure",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "LookBack",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "MostRecentProcedure",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Last",
               "source" : {
                  "type" : "Query",
                  "source" : [ {
                     "alias" : "P",
                     "expression" : {
                        "name" : "ProcList",
                        "type" : "OperandRef"
                     }
                  } ],
                  "relationship" : [ ],
                  "sort" : {
                     "by" : [ {
                        "direction" : "asc",
                        "type" : "ByExpression",
                        "expression" : {
                           "type" : "Coalesce",
                           "operand" : [ {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "strict" : false,
                                 "type" : "As",
                                 "operand" : {
                                    "name" : "performed",
                                    "type" : "IdentifierRef"
                                 },
                                 "asTypeSpecifier" : {
                                    "name" : "{http://hl7.org/fhir}dateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "end",
                                 "type" : "Property",
                                 "source" : {
                                    "strict" : false,
                                    "type" : "As",
                                    "operand" : {
                                       "name" : "performed",
                                       "type" : "IdentifierRef"
                                    },
                                    "asTypeSpecifier" : {
                                       "name" : "{http://hl7.org/fhir}Period",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           }, {
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "start",
                                 "type" : "Property",
                                 "source" : {
                                    "strict" : false,
                                    "type" : "As",
                                    "operand" : {
                                       "name" : "performed",
                                       "type" : "IdentifierRef"
                                    },
                                    "asTypeSpecifier" : {
                                       "name" : "{http://hl7.org/fhir}Period",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           } ]
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "ProcList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Procedure",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ServiceRequestActiveOrCompleted",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "S",
                  "expression" : {
                     "name" : "ServiceRequestList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "In",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "status",
                        "scope" : "S",
                        "type" : "Property"
                     }
                  }, {
                     "type" : "List",
                     "element" : [ {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "active",
                        "type" : "Literal"
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "completed",
                        "type" : "Literal"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ServiceRequestList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}ServiceRequest",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ServiceRequestLookBack",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "S",
                  "expression" : {
                     "name" : "ServiceRequestList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "In",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "authoredOn",
                        "scope" : "S",
                        "type" : "Property"
                     }
                  }, {
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "low" : {
                        "type" : "Subtract",
                        "operand" : [ {
                           "type" : "Now"
                        }, {
                           "name" : "LookBack",
                           "type" : "OperandRef"
                        } ]
                     },
                     "high" : {
                        "type" : "Now"
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "ServiceRequestList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}ServiceRequest",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "LookBack",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "MedicationStatementsByConcept",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "dataType" : "{http://hl7.org/fhir}MedicationStatement",
                     "type" : "Retrieve"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equivalent",
                  "operand" : [ {
                     "name" : "ToConcept",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "strict" : false,
                        "type" : "As",
                        "operand" : {
                           "path" : "medication",
                           "scope" : "M",
                           "type" : "Property"
                        },
                        "asTypeSpecifier" : {
                           "name" : "{http://hl7.org/fhir}CodeableConcept",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ]
                  }, {
                     "name" : "Koncept",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "Koncept",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Concept",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "MedicationRequestsByConcept",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "dataType" : "{http://hl7.org/fhir}MedicationRequest",
                     "type" : "Retrieve"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equivalent",
                  "operand" : [ {
                     "name" : "ToConcept",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "strict" : false,
                        "type" : "As",
                        "operand" : {
                           "path" : "medication",
                           "scope" : "M",
                           "type" : "Property"
                        },
                        "asTypeSpecifier" : {
                           "name" : "{http://hl7.org/fhir}CodeableConcept",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ]
                  }, {
                     "name" : "Koncept",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "Koncept",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Concept",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "ActiveMedicationStatement",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "name" : "MedList",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "identifier" : "EffectivePeriod",
                  "expression" : {
                     "name" : "PeriodToInterval",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "strict" : false,
                        "type" : "As",
                        "operand" : {
                           "path" : "effective",
                           "scope" : "M",
                           "type" : "Property"
                        },
                        "asTypeSpecifier" : {
                           "name" : "{http://hl7.org/fhir}Period",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ]
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "And",
                  "operand" : [ {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "M",
                           "type" : "Property"
                        }
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "active",
                        "type" : "Literal"
                     } ]
                  }, {
                     "type" : "Or",
                     "operand" : [ {
                        "type" : "IsNull",
                        "operand" : {
                           "type" : "End",
                           "operand" : {
                              "name" : "EffectivePeriod",
                              "type" : "QueryLetRef"
                           }
                        }
                     }, {
                        "type" : "After",
                        "operand" : [ {
                           "type" : "End",
                           "operand" : {
                              "name" : "EffectivePeriod",
                              "type" : "QueryLetRef"
                           }
                        }, {
                           "type" : "Now"
                        } ]
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "MedList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}MedicationStatement",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ActiveMedicationRequest",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "name" : "MedList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equal",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "status",
                        "scope" : "M",
                        "type" : "Property"
                     }
                  }, {
                     "valueType" : "{urn:hl7-org:elm-types:r1}String",
                     "value" : "active",
                     "type" : "Literal"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "MedList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}MedicationRequest",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ActiveOrCompletedMedicationRequest",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "name" : "MedList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "M",
                           "type" : "Property"
                        }
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "active",
                        "type" : "Literal"
                     } ]
                  }, {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "M",
                           "type" : "Property"
                        }
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "completed",
                        "type" : "Literal"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "MedList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}MedicationRequest",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ActiveOrCompletedMedicationStatement",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "name" : "MedList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "M",
                           "type" : "Property"
                        }
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "active",
                        "type" : "Literal"
                     } ]
                  }, {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "M",
                           "type" : "Property"
                        }
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "completed",
                        "type" : "Literal"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "MedList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}MedicationStatement",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "ActiveCompletedOrStoppedMedicationRequest",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "name" : "MedList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Or",
                     "operand" : [ {
                        "type" : "Equal",
                        "operand" : [ {
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "status",
                              "scope" : "M",
                              "type" : "Property"
                           }
                        }, {
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "active",
                           "type" : "Literal"
                        } ]
                     }, {
                        "type" : "Equal",
                        "operand" : [ {
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "status",
                              "scope" : "M",
                              "type" : "Property"
                           }
                        }, {
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "completed",
                           "type" : "Literal"
                        } ]
                     } ]
                  }, {
                     "type" : "Equal",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "M",
                           "type" : "Property"
                        }
                     }, {
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "stopped",
                        "type" : "Literal"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "MedList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}MedicationRequest",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "MedicationRequestLookBack",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "name" : "MedList",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "identifier" : "LookBackInterval",
                  "expression" : {
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "low" : {
                        "type" : "Subtract",
                        "operand" : [ {
                           "type" : "Now"
                        }, {
                           "name" : "LookBack",
                           "type" : "OperandRef"
                        } ]
                     },
                     "high" : {
                        "type" : "Now"
                     }
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "In",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "authoredOn",
                        "scope" : "M",
                        "type" : "Property"
                     }
                  }, {
                     "name" : "LookBackInterval",
                     "type" : "QueryLetRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "MedList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}MedicationRequest",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "LookBack",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "MedicationStatementLookBack",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "M",
                  "expression" : {
                     "name" : "MedList",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "identifier" : "LookBackInterval",
                  "expression" : {
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "low" : {
                        "type" : "Subtract",
                        "operand" : [ {
                           "type" : "Now"
                        }, {
                           "name" : "LookBack",
                           "type" : "OperandRef"
                        } ]
                     },
                     "high" : {
                        "type" : "Now"
                     }
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "In",
                     "operand" : [ {
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "strict" : false,
                           "type" : "As",
                           "operand" : {
                              "path" : "effective",
                              "scope" : "M",
                              "type" : "Property"
                           },
                           "asTypeSpecifier" : {
                              "name" : "{http://hl7.org/fhir}dateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }, {
                        "name" : "LookBackInterval",
                        "type" : "QueryLetRef"
                     } ]
                  }, {
                     "type" : "Overlaps",
                     "operand" : [ {
                        "name" : "PeriodToInterval",
                        "type" : "FunctionRef",
                        "operand" : [ {
                           "strict" : false,
                           "type" : "As",
                           "operand" : {
                              "path" : "effective",
                              "scope" : "M",
                              "type" : "Property"
                           },
                           "asTypeSpecifier" : {
                              "name" : "{http://hl7.org/fhir}Period",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ]
                     }, {
                        "name" : "LookBackInterval",
                        "type" : "QueryLetRef"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "MedList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}MedicationStatement",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "LookBack",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "EncountersByConcept",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "E",
                  "expression" : {
                     "dataType" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Retrieve"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Exists",
                  "operand" : {
                     "type" : "Query",
                     "source" : [ {
                        "alias" : "ET",
                        "expression" : {
                           "path" : "type",
                           "scope" : "E",
                           "type" : "Property"
                        }
                     } ],
                     "relationship" : [ ],
                     "where" : {
                        "type" : "Equivalent",
                        "operand" : [ {
                           "name" : "ToConcept",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "operand" : [ {
                              "name" : "ET",
                              "type" : "AliasRef"
                           } ]
                        }, {
                           "name" : "Koncept",
                           "type" : "OperandRef"
                        } ]
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "Koncept",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Concept",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "InProgress",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "E",
                  "expression" : {
                     "name" : "EncList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equal",
                  "operand" : [ {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "status",
                        "scope" : "E",
                        "type" : "Property"
                     }
                  }, {
                     "valueType" : "{urn:hl7-org:elm-types:r1}String",
                     "value" : "in-progress",
                     "type" : "Literal"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "EncList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "AllergyIntolerancesByConcept",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "A",
                  "expression" : {
                     "dataType" : "{http://hl7.org/fhir}AllergyIntolerance",
                     "type" : "Retrieve"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Equivalent",
                  "operand" : [ {
                     "name" : "ToConcept",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "operand" : [ {
                        "path" : "code",
                        "scope" : "A",
                        "type" : "Property"
                     } ]
                  }, {
                     "name" : "Koncept",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "Koncept",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Concept",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "name" : "ActiveOrConfirmedAllergyIntolerance",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "A",
                  "expression" : {
                     "name" : "AllergyIntolList",
                     "type" : "OperandRef"
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Equivalent",
                     "operand" : [ {
                        "name" : "ToConcept",
                        "libraryName" : "FHIRHelpers",
                        "type" : "FunctionRef",
                        "operand" : [ {
                           "path" : "clinicalStatus",
                           "scope" : "A",
                           "type" : "Property"
                        } ]
                     }, {
                        "name" : "AllergyIntolerance Active",
                        "type" : "ConceptRef"
                     } ]
                  }, {
                     "type" : "Equivalent",
                     "operand" : [ {
                        "name" : "ToConcept",
                        "libraryName" : "FHIRHelpers",
                        "type" : "FunctionRef",
                        "operand" : [ {
                           "path" : "verificationStatus",
                           "scope" : "A",
                           "type" : "Property"
                        } ]
                     }, {
                        "name" : "AllergyIntolerance Confirmed",
                        "type" : "ConceptRef"
                     } ]
                  } ]
               }
            },
            "operand" : [ {
               "name" : "AllergyIntolList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}AllergyIntolerance",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "name" : "GoalLookBack",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "expression" : {
               "type" : "Query",
               "source" : [ {
                  "alias" : "G",
                  "expression" : {
                     "name" : "GoalList",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "identifier" : "LookBackInterval",
                  "expression" : {
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "low" : {
                        "type" : "Subtract",
                        "operand" : [ {
                           "type" : "Now"
                        }, {
                           "name" : "LookBack",
                           "type" : "OperandRef"
                        } ]
                     },
                     "high" : {
                        "type" : "Now"
                     }
                  }
               }, {
                  "identifier" : "StartDate",
                  "expression" : {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "strict" : false,
                        "type" : "As",
                        "operand" : {
                           "path" : "start",
                           "scope" : "G",
                           "type" : "Property"
                        },
                        "asTypeSpecifier" : {
                           "name" : "{http://hl7.org/fhir}date",
                           "type" : "NamedTypeSpecifier"
                        }
                     }
                  }
               }, {
                  "identifier" : "StatusDate",
                  "expression" : {
                     "path" : "value",
                     "type" : "Property",
                     "source" : {
                        "path" : "statusDate",
                        "scope" : "G",
                        "type" : "Property"
                     }
                  }
               }, {
                  "identifier" : "TargetDates",
                  "expression" : {
                     "type" : "Query",
                     "source" : [ {
                        "alias" : "T",
                        "expression" : {
                           "path" : "target",
                           "scope" : "G",
                           "type" : "Property"
                        }
                     } ],
                     "relationship" : [ ],
                     "return" : {
                        "expression" : {
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "strict" : false,
                              "type" : "As",
                              "operand" : {
                                 "path" : "due",
                                 "scope" : "T",
                                 "type" : "Property"
                              },
                              "asTypeSpecifier" : {
                                 "name" : "{http://hl7.org/fhir}date",
                                 "type" : "NamedTypeSpecifier"
                              }
                           }
                        }
                     }
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "type" : "Or",
                  "operand" : [ {
                     "type" : "Or",
                     "operand" : [ {
                        "type" : "In",
                        "operand" : [ {
                           "type" : "ToDateTime",
                           "operand" : {
                              "name" : "StartDate",
                              "type" : "QueryLetRef"
                           }
                        }, {
                           "name" : "LookBackInterval",
                           "type" : "QueryLetRef"
                        } ]
                     }, {
                        "type" : "In",
                        "operand" : [ {
                           "type" : "ToDateTime",
                           "operand" : {
                              "name" : "StatusDate",
                              "type" : "QueryLetRef"
                           }
                        }, {
                           "name" : "LookBackInterval",
                           "type" : "QueryLetRef"
                        } ]
                     } ]
                  }, {
                     "type" : "Exists",
                     "operand" : {
                        "type" : "Query",
                        "source" : [ {
                           "alias" : "TD",
                           "expression" : {
                              "name" : "TargetDates",
                              "type" : "QueryLetRef"
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "type" : "In",
                           "operand" : [ {
                              "type" : "ToDateTime",
                              "operand" : {
                                 "name" : "TD",
                                 "type" : "AliasRef"
                              }
                           }, {
                              "name" : "LookBackInterval",
                              "type" : "QueryLetRef"
                           } ]
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "GoalList",
               "operandTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Goal",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            }, {
               "name" : "LookBack",
               "operandTypeSpecifier" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         } ]
      }
   }
}

"
    }
  ]
}
