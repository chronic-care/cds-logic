{
  "resourceType": "Library",
  "id": "library-goal-management",
  "url": "http://github.com/chronic-care/fhir/Library/library-goal-management",
  "version": "1.0.0",
  "name": "Goal_Management_FHIRv400",
  "title": "Patient-Centered Goal Management",
  "status": "active",
  "experimental": true,
  "type" : {
    "coding" : [
      {
        "system" : "http://terminology.hl7.org/CodeSystem/library-type",
        "code" : "logic-library",
        "display" : "Logic Library"
      }
    ]
  },
  "relatedArtifact" : [
    {
      "type" : "depends-on",
      "resource" : "Library/library-commons"
    }
  ],
  "dataRequirement": [
    {
      "type": "Observation"
    }
  ],
  "content": [
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}
